@istest
public with sharing class MaintenanceRequestHelperTest 
{

    private static final string MBASTATUS_NEW = 'New';
    private static final string MBACLOSED = 'Closed';
    private static final string MBAREQUEST_SUBJECT = 'Testing subject';
    private static final string MBAREPAIR = 'Repair';
    private static final string MBAREQUEST_ORIGIN = 'Web';
    private static final string MBAREQUEST_TYPE = 'Routine Maintenance';
    private static final string MBAWORKING = 'Working';

    private static Vehicle__c MBAcreatevehicle()
    {
        Vehicle__c Vehicle = new Vehicle__C(name = 'SuperTruck');
        return Vehicle;
    }

    private static Product2 MBAcreateequipment()
    {
        product2 equipment = new product2(name = 'SuperEquipment', lifespan_months__C = 10, maintenance_cycle__C = 10, replacement_part__c = true);
        return equipment;
    }

    private static Case MBAcreatemaintenancerequest(id vehicleId, id equipmentId)
    {
        case MBAcase = new case(Type=MBAREPAIR, Status=MBASTATUS_NEW, Origin=MBAREQUEST_ORIGIN, Subject=MBAREQUEST_SUBJECT, Equipment__c=equipmentId, Vehicle__c=vehicleId);
        return MBAcase;
    }

    private static Equipment_Maintenance_Item__c MBAcreateworkpart(id equipmentId,id requestId)
    {
        Equipment_Maintenance_Item__c wp = new Equipment_Maintenance_Item__c(Equipment__c = equipmentId, Maintenance_Request__c = requestId);
        return wp;
    }


    @istest
    private static void testMaintenanceRequestPositive()
    {
        Vehicle__c vehicle = MBAcreatevehicle();
        insert vehicle;
        id vehicleId = vehicle.Id;

        Product2 equipment = MBAcreateequipment();
        insert equipment;
        id equipmentId = equipment.Id;

        case MBAcase = MBAcreatemaintenancerequest(vehicleId,equipmentId);
        insert MBAcase;

        Equipment_Maintenance_Item__c MBAwork_p = MBAcreateworkpart(equipmentId,MBAcase.id);
        insert MBAwork_p;

        test.startTest();
        MBAcase.status = MBACLOSED;
        update MBAcase;
        test.stopTest();

        Case newReq = [Select id, subject, type, Equipment__c, Date_Reported__c, Vehicle__c, Date_Due__c from case where status =:MBASTATUS_NEW];

        Equipment_Maintenance_Item__c MBAwork_part = [select id from Equipment_Maintenance_Item__c where Maintenance_Request__c =:newReq.Id];

        system.assert(MBAwork_part != null);
        system.assert(newReq.Subject != null);
        system.assertEquals(newReq.Type, MBAREQUEST_TYPE);
        SYSTEM.assertEquals(newReq.Equipment__c, equipmentId);
        SYSTEM.assertEquals(newReq.Vehicle__c, vehicleId);
        SYSTEM.assertEquals(newReq.Date_Reported__c, system.today());
    }

    @istest
    private static void testMaintenanceRequestNegative()
    {
        Vehicle__C vehicle = MBAcreatevehicle();
        insert vehicle;
        id vehicleId = vehicle.Id;

        product2 equipment = MBAcreateequipment();
        insert equipment;
        id equipmentId = equipment.Id;

        case MBAempty_request = MBAcreatemaintenancerequest(vehicleId,equipmentId);
        insert MBAempty_request;

        Equipment_Maintenance_Item__c MBAwork_p = MBAcreateworkpart(equipmentId, MBAempty_request.Id);
        insert MBAwork_p;

        test.startTest();
        MBAempty_request.Status = MBAWORKING;
        update MBAempty_request;
        test.stopTest();

        list<case> MBAall_request = [select id 
                                 from case];

        Equipment_Maintenance_Item__c MBAwork_part = [select id from Equipment_Maintenance_Item__c where Maintenance_Request__c = :MBAempty_request.Id];

        system.assert(MBAwork_part != null);
        system.assert(MBAall_request.size() == 1);
    }

    @istest
    private static void testMaintenanceRequestBulk()
    {
        list<Vehicle__C> MBAvehicle_list = new list<Vehicle__C>();
        list<Product2> MBAequipment_list = new list<Product2>();
        list<Equipment_Maintenance_Item__c> MBAwork_partList = new list<Equipment_Maintenance_Item__c>();
        list<case> MBArequestlist = new list<case>();
        list<id> MBAold_request_ids = new list<id>();

        for(integer i = 0; i < 300; i++)
        {
            MBAvehicle_list.add(MBAcreatevehicle());
            MBAequipment_list.add(MBAcreateequipment());
        }
        insert MBAvehicle_list;
        insert MBAequipment_list;

        for(integer i = 0; i < 300; i++)
        {
            MBArequestlist.add(MBAcreatemaintenancerequest(MBAvehicle_list.get(i).id, MBAequipment_list.get(i).id));
        }
        insert MBArequestlist;

        for(integer i = 0; i < 300; i++)
        {
            MBAwork_partList.add(MBAcreateworkpart(MBAequipment_list.get(i).id, MBArequestlist.get(i).id));
        }
        insert MBAwork_partList;

        test.startTest();
        for(case MBA : MBArequestlist)
        {
            MBA.Status = MBACLOSED;
            MBAold_request_ids.add(MBA.Id);
        }
        update MBArequestlist;
        test.stopTest();

        list<case> MBAallrequests = [select id from case where status =: MBASTATUS_NEW];

        list<Equipment_Maintenance_Item__c> MBAwork_parts = [select id from Equipment_Maintenance_Item__c where Maintenance_Request__c in: MBAold_request_ids];

        system.assert(MBAallrequests.size() == 300);
    }
}
